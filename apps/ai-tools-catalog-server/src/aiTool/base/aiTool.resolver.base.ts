/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AiTool } from "./AiTool";
import { AiToolCountArgs } from "./AiToolCountArgs";
import { AiToolFindManyArgs } from "./AiToolFindManyArgs";
import { AiToolFindUniqueArgs } from "./AiToolFindUniqueArgs";
import { CreateAiToolArgs } from "./CreateAiToolArgs";
import { UpdateAiToolArgs } from "./UpdateAiToolArgs";
import { DeleteAiToolArgs } from "./DeleteAiToolArgs";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { AiToolService } from "../aiTool.service";
@graphql.Resolver(() => AiTool)
export class AiToolResolverBase {
  constructor(protected readonly service: AiToolService) {}

  async _aiToolsMeta(
    @graphql.Args() args: AiToolCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AiTool])
  async aiTools(@graphql.Args() args: AiToolFindManyArgs): Promise<AiTool[]> {
    return this.service.aiTools(args);
  }

  @graphql.Query(() => AiTool, { nullable: true })
  async aiTool(
    @graphql.Args() args: AiToolFindUniqueArgs
  ): Promise<AiTool | null> {
    const result = await this.service.aiTool(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AiTool)
  async createAiTool(@graphql.Args() args: CreateAiToolArgs): Promise<AiTool> {
    return await this.service.createAiTool({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AiTool)
  async updateAiTool(
    @graphql.Args() args: UpdateAiToolArgs
  ): Promise<AiTool | null> {
    try {
      return await this.service.updateAiTool({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AiTool)
  async deleteAiTool(
    @graphql.Args() args: DeleteAiToolArgs
  ): Promise<AiTool | null> {
    try {
      return await this.service.deleteAiTool(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Review], { name: "reviews" })
  async findReviews(
    @graphql.Parent() parent: AiTool,
    @graphql.Args() args: ReviewFindManyArgs
  ): Promise<Review[]> {
    const results = await this.service.findReviews(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
