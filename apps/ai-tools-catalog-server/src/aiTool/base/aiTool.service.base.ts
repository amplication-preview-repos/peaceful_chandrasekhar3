/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AiTool as PrismaAiTool,
  Review as PrismaReview,
} from "@prisma/client";

export class AiToolServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AiToolCountArgs, "select">): Promise<number> {
    return this.prisma.aiTool.count(args);
  }

  async aiTools(args: Prisma.AiToolFindManyArgs): Promise<PrismaAiTool[]> {
    return this.prisma.aiTool.findMany(args);
  }
  async aiTool(
    args: Prisma.AiToolFindUniqueArgs
  ): Promise<PrismaAiTool | null> {
    return this.prisma.aiTool.findUnique(args);
  }
  async createAiTool(args: Prisma.AiToolCreateArgs): Promise<PrismaAiTool> {
    return this.prisma.aiTool.create(args);
  }
  async updateAiTool(args: Prisma.AiToolUpdateArgs): Promise<PrismaAiTool> {
    return this.prisma.aiTool.update(args);
  }
  async deleteAiTool(args: Prisma.AiToolDeleteArgs): Promise<PrismaAiTool> {
    return this.prisma.aiTool.delete(args);
  }

  async findReviews(
    parentId: string,
    args: Prisma.ReviewFindManyArgs
  ): Promise<PrismaReview[]> {
    return this.prisma.aiTool
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviews(args);
  }
}
